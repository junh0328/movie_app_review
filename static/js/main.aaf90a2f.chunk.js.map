{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","components/Navigation.js","App.js","index.js"],"names":["Movie","title","year","summary","poster","genres","className","src","alt","slice","map","genre","index","key","Home","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","About","Navigation","to","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"8XA+BeA,MA3Bf,YAA4D,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC/C,OACE,yBAAKC,UAAU,SACb,yBAAKC,IAAKH,EAAQI,IAAKP,EAAOA,MAAOA,IACrC,yBAAKK,UAAW,eACd,wBAAIA,UAAU,gBAAgBL,GAC9B,wBAAIK,UAAU,eAAeJ,GAC7B,uBAAGI,UAAU,kBAAkBH,EAAQM,MAAM,EAAG,MAChD,wBAAIH,UAAU,iBACXD,EAAOK,KAAI,SAACC,EAAOC,GAClB,OAAO,wBAAIC,IAAKD,EAAON,UAAU,gBAAgBK,UC8C9CG,G,kNArDbC,MAAQ,CAENC,WAAW,EACXC,OAAQ,I,EAIRC,U,sBAAY,8BAAAC,EAAA,sEAEFC,IAAMC,IAAI,8EAFR,gBACaJ,EADb,EACFK,KAAOA,KAAQL,OAKvB,EAAKM,SAAS,CAAEN,OAASA,EAAQD,WAAU,IANjC,2C,kEAcZQ,KAAKN,c,+BAGE,IAAD,EACwBM,KAAKT,MAA3BC,EADF,EACEA,UAAWC,EADb,EACaA,OACnB,OACA,6BAASX,UAAU,aAChBU,EACC,yBAAKV,UAAW,UACd,0BAAMA,UAAU,eAAhB,kBAGF,yBAAKA,UAAW,UACfW,EAAOP,KAAI,SAACe,GAAD,OACb,kBAAC,EAAD,CAECZ,IAAOY,EAAMC,GACbA,GAAID,EAAMC,GACVxB,KAAMuB,EAAMvB,KACZD,MAAOwB,EAAMxB,MACbE,QAASsB,EAAMtB,QACfC,OAAQqB,EAAME,mBACdtB,OAAQoB,EAAMpB,kB,GA5CHuB,IAAMC,Y,4BCQVC,MAXf,WACE,OACE,yBAAKxB,UAAU,oBACb,oIAGA,yD,MCISyB,MATf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,IAAD,CAAM0B,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WCSSC,MAVf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWtB,IACxC,kBAAC,IAAD,CAAOoB,KAAK,SAASE,UAAWN,MCPtCO,IAASC,OACL,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.aaf90a2f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\n\nfunction Movie ( { title, year, summary, poster, genres } ){\n  return(\n    <div className=\"movie\" >\n      <img src={poster} alt={title} title={title}/>\n      <div className= \"movie__data\">\n        <h3 className=\"movie__title\">{title}</h3>\n        <h5 className=\"movie__year\">{year}</h5>\n        <p className=\"movie__summary\">{summary.slice(0, 180)}</p>\n        <ul className=\"movie__genres\">\n          {genres.map((genre, index) => {\n            return <li key={index} className=\"movie__genre\">{genre}</li>;\n          })}\n        </ul>\n      </div>\n    </div>\n  )\n}\n// {poster} 에는 movie.medium_cover_image의 실제 데이터인 이미지 url이 들어가게 된다.\n\nMovie.propTypes = {\n  year: PropTypes.number.isRequired,\n  title : PropTypes.string.isRequired,\n  summary : PropTypes.string.isRequired,\n  poster : PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Movie;","import React from 'react';\nimport axios from 'axios';\nimport Movie from '../components/Movie';\nimport './Home.css';\n\n\nclass Home extends React.Component {\n  state = {\n    //isLoading이 true가 되면, 그에 따라 불러올 영화 데이터들이 movies 배열에 담기게 된다.\n    isLoading: true,\n    movies: [],\n    \n  };\n\n    getMovies = async () => {\n      const { data: {data: { movies },},} \n      = await axios.get('https://yts-proxy.now.sh/list_movies.json?limit=30&&sort_by=download_count');\n      // 기존에 movies의 배열이 담길 변수 movies를 구조 분해 할당을 통해 만들었다.\n\n      \n      this.setState({ movies : movies, isLoading:false });\n      // state에 있는 movies : 구조 분해 할당으로 얻은 movies\n      // isLoading은 데이터를 다 가져오게 되면 false로 바꿔준다. 후에 화면에는 we are ready가 출력되게 된다.\n    };\n    \n\n  componentDidMount() {\n    //영화 로딩\n    this.getMovies();\n  }\n\n  render(){\n    const { isLoading, movies } = this.state;\n    return (\n    <section className=\"container\">\n      {isLoading ? (\n        <div className =\"loader\">\n          <span className=\"loader_text\">'Loading ...'</span>\n        </div>\n        ) : (\n        <div className =\"movies\">\n        {movies.map((movie) => (\n       <Movie   \n        // Movie 컴포넌트에서 받아오는 프롭스 = { 실제 들어가야할 json의 속성명 } \n        key = {movie.id}\n        id={movie.id} \n        year={movie.year}\n        title={movie.title}\n        summary={movie.summary}\n        poster={movie.medium_cover_image}\n        genres={movie.genres}\n      />\n        ))}      \n    </div>\n      )}\n    </section>\n    );\n   }\n}\n\nexport default Home;\n\n\n/*\n  초기 설정에 대한 state 중 isLoading을 true로 둔다.\n  그리고 isLoading 상태에 따라, isLoading이 true이면, Loading ... 이라는 메세지가, false이면  We are ready라는 메세지가 뜨도록 한다.\n  실제로 생명주기 함수를 도입하면, isLoading 이 false인 상태가 로딩이 완료되었다는 뜻으로 앱에 영화의 구성을 올리게 될 것이다.\n*/\n\n/*\n  axios.get('url')을 가져오기 전에 react파일이 실행되면, 빈 창이 뜰 수 있으므로, 반드시 url을 먼저 가져온 후에 실행 시키기 위해서 (비동기 처리)\n  async , await 함수를 사용하였다. getMovies를 함수로 만들어서 담긴 값을 담을 변수 movies를 만들고 후에 배열로 저장합니다.\n*/","import React from 'react';\nimport './About.css';\n\nfunction About(){\n  return (\n    <div className=\"about__container\">\n      <span>\n        \"Freedom is the freedom to say that two plus two make four. If that is granted, all else follows.\"\n      </span>\n      <span>- George Orwell, 1984</span>\n    </div>\n  )\n}\n\nexport default About;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Navigation.css';\n\nfunction Navigation(){\n  return (\n    <div className=\"nav\">\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/about\">About</Link>\n    </div>\n  );\n}\n\nexport default Navigation;","import React from 'react';\nimport Home from './routes/Home';\nimport './App.css';\nimport { HashRouter, Route } from 'react-router-dom';\nimport About from './routes/About';\nimport Navigation from './components/Navigation'\n\nfunction App(){\n  return (\n    <HashRouter>\n      <Navigation/>\n      <Route path=\"/\" exact={true} component={Home}/>\n      <Route path=\"/about\" component={About}/>\n    </HashRouter>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}